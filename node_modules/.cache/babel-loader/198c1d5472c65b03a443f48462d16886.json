{"ast":null,"code":"// import React, { Component } from 'react';\n// import {storeProducts, detailProduct} from './data';\n// const ProductContext = React.createContext();\n// class ProductProvider extends Component {\n//     state ={\n//         products:[],\n//         detailProduct:detailProduct,\n//         cart:[]\n//     };\n//     componentDidMount() {\n//         this.setProducts();\n//     }\n//     setProducts = ()=> {\n//         let tempProducts = [];\n//         storeProducts.forEach(item =>{\n//             const singleItem ={...item};\n//             tempProducts =[...tempProducts,singleItem];\n//     });\n//     this.setState(()=>{\n//         return {products:tempProducts}\n//     });\n// };\n// getItem = id => {\n//     const product = this.state.products.find(item => item.id===id);\n//     return product;\n// }\n//     handleDetail = id => {\n//         const product = this.getItem(id);\n//         this.setState(()=>{\n//             return {detailProduct:product}\n//         });\n//     };\n//     addToCart = (id) => {\n//         let tempProducts = [...this.state.products];\n//         const index = tempProducts.indexOf(this.getItem(id));\n//         const product = tempProducts[index];\n//         product.inCart = true;\n//         product.count = 1;\n//         const price = product.price;\n//         product.total = price;\n//         this.setState(()=>{\n//             return {products:tempProducts, cart:[...this.state.cart, product] };\n//         },()=>{console.log(this.state)});\n//     };\n//     render() {\n//         return (\n//             <>\n//             <ProductContext.Provider value={{\n//                 ...this.state,\n//                 handleDetail: this.state.handleDetail,\n//                 addToCart: this.state.addToCart\n//             }}>\n//                 {this.props.children}\n//             </ProductContext.Provider>\n//             </>\n//         )\n//     }\n// }\n// const ProductConsumer = ProductContext.Consumer;\n// export {ProductProvider , ProductConsumer };\n// import React, { Component } from \"react\";\n// import { storeProducts, detailProduct } from \"./data\";\n// const ProductContext = React.createContext();\n// class ProductProvider extends Component {\n//   state = {\n//     products: [],\n//     detailProduct: detailProduct,\n//     cart: [],\n//     modalOpen: false,\n//     modalProduct: detailProduct,\n//     cartSubTotal: 0,\n//     cartTax: 0,\n//     cartTotal: 0\n//   };\n//   componentDidMount() {\n//     this.setProducts();\n//   }\n//   setProducts = () => {\n//     let products = [];\n//     storeProducts.forEach(item => {\n//       const singleItem = { ...item };\n//       products = [...products, singleItem];\n//     });\n//     this.setState(() => {\n//       return { products };\n//     }, this.checkCartItems);\n//   };\n//   getItem = id => {\n//     const product = this.state.products.find(item => item.id === id);\n//     return product;\n//   };\n//   handleDetail = id => {\n//     const product = this.getItem(id);\n//     this.setState(() => {\n//       return { detailProduct: product };\n//     });\n//   };\n//   addToCart = id => {\n//     let tempProducts = [...this.state.products];\n//     const index = tempProducts.indexOf(this.getItem(id));\n//     const product = tempProducts[index];\n//     product.inCart = true;\n//     product.count = 1;\n//     const price = product.price;\n//     product.total = price;\n//     this.setState(() => {\n//       return {\n//         products: [...tempProducts],\n//         cart: [...this.state.cart, product],\n//         detailProduct: { ...product }\n//       };\n//     }, this.addTotals);\n//   };\n//   openModal = id => {\n//     const product = this.getItem(id);\n//     this.setState(() => {\n//       return { modalProduct: product, modalOpen: true };\n//     });\n//   };\n//   closeModal = () => {\n//     this.setState(() => {\n//       return { modalOpen: false };\n//     });\n//   };\n//   increment = id => {\n//     let tempCart = [...this.state.cart];\n//     const selectedProduct = tempCart.find(item => {\n//       return item.id === id;\n//     });\n//     const index = tempCart.indexOf(selectedProduct);\n//     const product = tempCart[index];\n//     product.count = product.count + 1;\n//     product.total = product.count * product.price;\n//     this.setState(() => {\n//       return {\n//         cart: [...tempCart]\n//       };\n//     }, this.addTotals);\n//   };\n//   decrement = id => {\n//     let tempCart = [...this.state.cart];\n//     const selectedProduct = tempCart.find(item => {\n//       return item.id === id;\n//     });\n//     const index = tempCart.indexOf(selectedProduct);\n//     const product = tempCart[index];\n//     product.count = product.count - 1;\n//     if (product.count === 0) {\n//       this.removeItem(id);\n//     } else {\n//       product.total = product.count * product.price;\n//       this.setState(() => {\n//         return { cart: [...tempCart] };\n//       }, this.addTotals);\n//     }\n//   };\n//   getTotals = () => {\n//     // const subTotal = this.state.cart\n//     //   .map(item => item.total)\n//     //   .reduce((acc, curr) => {\n//     //     acc = acc + curr;\n//     //     return acc;\n//     //   }, 0);\n//     let subTotal = 0;\n//     this.state.cart.map(item => (subTotal += item.total));\n//     const tempTax = subTotal * 0.1;\n//     const tax = parseFloat(tempTax.toFixed(2));\n//     const total = subTotal + tax;\n//     return {\n//       subTotal,\n//       tax,\n//       total\n//     };\n//   };\n//   addTotals = () => {\n//     const totals = this.getTotals();\n//     this.setState(\n//       () => {\n//         return {\n//           cartSubTotal: totals.subTotal,\n//           cartTax: totals.tax,\n//           cartTotal: totals.total\n//         };\n//       },\n//       () => {\n//         // console.log(this.state);\n//       }\n//     );\n//   };\n//   removeItem = id => {\n//     let tempProducts = [...this.state.products];\n//     let tempCart = [...this.state.cart];\n//     const index = tempProducts.indexOf(this.getItem(id));\n//     let removedProduct = tempProducts[index];\n//     removedProduct.inCart = false;\n//     removedProduct.count = 0;\n//     removedProduct.total = 0;\n//     tempCart = tempCart.filter(item => {\n//       return item.id !== id;\n//     });\n//     this.setState(() => {\n//       return {\n//         cart: [...tempCart],\n//         products: [...tempProducts]\n//       };\n//     }, this.addTotals);\n//   };\n//   clearCart = () => {\n//     this.setState(\n//       () => {\n//         return { cart: [] };\n//       },\n//       () => {\n//         this.setProducts();\n//         this.addTotals();\n//       }\n//     );\n//   };\n//   render() {\n//     return (\n//       <ProductContext.Provider\n//         value={{\n//           ...this.state,\n//           handleDetail: this.handleDetail,\n//           addToCart: this.addToCart,\n//           openModal: this.openModal,\n//           closeModal: this.closeModal,\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           removeItem: this.removeItem,\n//           clearCart: this.clearCart\n//         }}\n//       >\n//         {this.props.children}\n//       </ProductContext.Provider>\n//     );\n//   }\n// }\n// const ProductConsumer = ProductContext.Consumer;\n// export { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["F:/react/mobile/src/Context.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import {storeProducts, detailProduct} from './data';\r\n\r\n// const ProductContext = React.createContext();\r\n\r\n// class ProductProvider extends Component {\r\n//     state ={\r\n//         products:[],\r\n//         detailProduct:detailProduct,\r\n//         cart:[]\r\n//     };\r\n    \r\n//     componentDidMount() {\r\n//         this.setProducts();\r\n//     }\r\n//     setProducts = ()=> {\r\n//         let tempProducts = [];\r\n//         storeProducts.forEach(item =>{\r\n//             const singleItem ={...item};\r\n//             tempProducts =[...tempProducts,singleItem];\r\n//     });\r\n    \r\n\r\n//     this.setState(()=>{\r\n//         return {products:tempProducts}\r\n//     });\r\n\r\n// };\r\n\r\n// getItem = id => {\r\n//     const product = this.state.products.find(item => item.id===id);\r\n//     return product;\r\n// }\r\n//     handleDetail = id => {\r\n//         const product = this.getItem(id);\r\n//         this.setState(()=>{\r\n//             return {detailProduct:product}\r\n//         });\r\n//     };\r\n\r\n//     addToCart = (id) => {\r\n//         let tempProducts = [...this.state.products];\r\n//         const index = tempProducts.indexOf(this.getItem(id));\r\n//         const product = tempProducts[index];\r\n//         product.inCart = true;\r\n//         product.count = 1;\r\n//         const price = product.price;\r\n//         product.total = price;\r\n//         this.setState(()=>{\r\n//             return {products:tempProducts, cart:[...this.state.cart, product] };\r\n//         },()=>{console.log(this.state)});\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//             <ProductContext.Provider value={{\r\n//                 ...this.state,\r\n//                 handleDetail: this.state.handleDetail,\r\n//                 addToCart: this.state.addToCart\r\n//             }}>\r\n//                 {this.props.children}\r\n                \r\n//             </ProductContext.Provider>\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const ProductConsumer = ProductContext.Consumer;\r\n\r\n// export {ProductProvider , ProductConsumer };\r\n\r\n// import React, { Component } from \"react\";\r\n// import { storeProducts, detailProduct } from \"./data\";\r\n// const ProductContext = React.createContext();\r\n\r\n// class ProductProvider extends Component {\r\n//   state = {\r\n//     products: [],\r\n//     detailProduct: detailProduct,\r\n//     cart: [],\r\n//     modalOpen: false,\r\n//     modalProduct: detailProduct,\r\n//     cartSubTotal: 0,\r\n//     cartTax: 0,\r\n//     cartTotal: 0\r\n//   };\r\n//   componentDidMount() {\r\n//     this.setProducts();\r\n//   }\r\n\r\n//   setProducts = () => {\r\n//     let products = [];\r\n//     storeProducts.forEach(item => {\r\n//       const singleItem = { ...item };\r\n//       products = [...products, singleItem];\r\n//     });\r\n//     this.setState(() => {\r\n//       return { products };\r\n//     }, this.checkCartItems);\r\n//   };\r\n\r\n//   getItem = id => {\r\n//     const product = this.state.products.find(item => item.id === id);\r\n//     return product;\r\n//   };\r\n//   handleDetail = id => {\r\n//     const product = this.getItem(id);\r\n//     this.setState(() => {\r\n//       return { detailProduct: product };\r\n//     });\r\n//   };\r\n//   addToCart = id => {\r\n//     let tempProducts = [...this.state.products];\r\n//     const index = tempProducts.indexOf(this.getItem(id));\r\n//     const product = tempProducts[index];\r\n//     product.inCart = true;\r\n//     product.count = 1;\r\n//     const price = product.price;\r\n//     product.total = price;\r\n\r\n//     this.setState(() => {\r\n//       return {\r\n//         products: [...tempProducts],\r\n//         cart: [...this.state.cart, product],\r\n//         detailProduct: { ...product }\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   openModal = id => {\r\n//     const product = this.getItem(id);\r\n//     this.setState(() => {\r\n//       return { modalProduct: product, modalOpen: true };\r\n//     });\r\n//   };\r\n//   closeModal = () => {\r\n//     this.setState(() => {\r\n//       return { modalOpen: false };\r\n//     });\r\n//   };\r\n//   increment = id => {\r\n//     let tempCart = [...this.state.cart];\r\n//     const selectedProduct = tempCart.find(item => {\r\n//       return item.id === id;\r\n//     });\r\n//     const index = tempCart.indexOf(selectedProduct);\r\n//     const product = tempCart[index];\r\n//     product.count = product.count + 1;\r\n//     product.total = product.count * product.price;\r\n//     this.setState(() => {\r\n//       return {\r\n//         cart: [...tempCart]\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   decrement = id => {\r\n//     let tempCart = [...this.state.cart];\r\n//     const selectedProduct = tempCart.find(item => {\r\n//       return item.id === id;\r\n//     });\r\n//     const index = tempCart.indexOf(selectedProduct);\r\n//     const product = tempCart[index];\r\n//     product.count = product.count - 1;\r\n//     if (product.count === 0) {\r\n//       this.removeItem(id);\r\n//     } else {\r\n//       product.total = product.count * product.price;\r\n//       this.setState(() => {\r\n//         return { cart: [...tempCart] };\r\n//       }, this.addTotals);\r\n//     }\r\n//   };\r\n//   getTotals = () => {\r\n//     // const subTotal = this.state.cart\r\n//     //   .map(item => item.total)\r\n//     //   .reduce((acc, curr) => {\r\n//     //     acc = acc + curr;\r\n//     //     return acc;\r\n//     //   }, 0);\r\n//     let subTotal = 0;\r\n//     this.state.cart.map(item => (subTotal += item.total));\r\n//     const tempTax = subTotal * 0.1;\r\n//     const tax = parseFloat(tempTax.toFixed(2));\r\n//     const total = subTotal + tax;\r\n//     return {\r\n//       subTotal,\r\n//       tax,\r\n//       total\r\n//     };\r\n//   };\r\n//   addTotals = () => {\r\n//     const totals = this.getTotals();\r\n//     this.setState(\r\n//       () => {\r\n//         return {\r\n//           cartSubTotal: totals.subTotal,\r\n//           cartTax: totals.tax,\r\n//           cartTotal: totals.total\r\n//         };\r\n//       },\r\n//       () => {\r\n//         // console.log(this.state);\r\n//       }\r\n//     );\r\n//   };\r\n//   removeItem = id => {\r\n//     let tempProducts = [...this.state.products];\r\n//     let tempCart = [...this.state.cart];\r\n\r\n//     const index = tempProducts.indexOf(this.getItem(id));\r\n//     let removedProduct = tempProducts[index];\r\n//     removedProduct.inCart = false;\r\n//     removedProduct.count = 0;\r\n//     removedProduct.total = 0;\r\n\r\n//     tempCart = tempCart.filter(item => {\r\n//       return item.id !== id;\r\n//     });\r\n\r\n//     this.setState(() => {\r\n//       return {\r\n//         cart: [...tempCart],\r\n//         products: [...tempProducts]\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   clearCart = () => {\r\n//     this.setState(\r\n//       () => {\r\n//         return { cart: [] };\r\n//       },\r\n//       () => {\r\n//         this.setProducts();\r\n//         this.addTotals();\r\n//       }\r\n//     );\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <ProductContext.Provider\r\n//         value={{\r\n//           ...this.state,\r\n//           handleDetail: this.handleDetail,\r\n//           addToCart: this.addToCart,\r\n//           openModal: this.openModal,\r\n//           closeModal: this.closeModal,\r\n//           increment: this.increment,\r\n//           decrement: this.decrement,\r\n//           removeItem: this.removeItem,\r\n//           clearCart: this.clearCart\r\n//         }}\r\n//       >\r\n//         {this.props.children}\r\n//       </ProductContext.Provider>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const ProductConsumer = ProductContext.Consumer;\r\n\r\n// export { ProductProvider, ProductConsumer };"]},"metadata":{},"sourceType":"module"}