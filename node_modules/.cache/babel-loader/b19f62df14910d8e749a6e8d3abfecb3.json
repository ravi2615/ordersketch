{"ast":null,"code":"var _jsxFileName = \"F:\\\\react\\\\mobile\\\\src\\\\Context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: []\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      storeProducts.forEach(item => {\n        const singleItem = { ...item\n        };\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products\n        };\n      }, this.checkCartItems);\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: [...tempProducts],\n          cart: [...this.state.cart, product],\n          detailProduct: { ...product\n          }\n        };\n      }, this.addTotals);\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        handleDetail: this.state.handleDetail,\n        addToCart: this.state.addToCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, this.props.children));\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer }; // import React, { Component } from \"react\";\n// import { storeProducts, detailProduct } from \"./data\";\n// const ProductContext = React.createContext();\n// class ProductProvider extends Component {\n//   state = {\n//     products: [],\n//     detailProduct: detailProduct,\n//     cart: [],\n//     modalOpen: false,\n//     modalProduct: detailProduct,\n//     cartSubTotal: 0,\n//     cartTax: 0,\n//     cartTotal: 0\n//   };\n//   componentDidMount() {\n//     this.setProducts();\n//   }\n//   setProducts = () => {\n//     let products = [];\n//     storeProducts.forEach(item => {\n//       const singleItem = { ...item };\n//       products = [...products, singleItem];\n//     });\n//     this.setState(() => {\n//       return { products };\n//     }, this.checkCartItems);\n//   };\n//   getItem = id => {\n//     const product = this.state.products.find(item => item.id === id);\n//     return product;\n//   };\n//   handleDetail = id => {\n//     const product = this.getItem(id);\n//     this.setState(() => {\n//       return { detailProduct: product };\n//     });\n//   };\n//   addToCart = id => {\n//     let tempProducts = [...this.state.products];\n//     const index = tempProducts.indexOf(this.getItem(id));\n//     const product = tempProducts[index];\n//     product.inCart = true;\n//     product.count = 1;\n//     const price = product.price;\n//     product.total = price;\n//     this.setState(() => {\n//       return {\n//         products: [...tempProducts],\n//         cart: [...this.state.cart, product],\n//         detailProduct: { ...product }\n//       };\n//     }, this.addTotals);\n//   };\n//   openModal = id => {\n//     const product = this.getItem(id);\n//     this.setState(() => {\n//       return { modalProduct: product, modalOpen: true };\n//     });\n//   };\n//   closeModal = () => {\n//     this.setState(() => {\n//       return { modalOpen: false };\n//     });\n//   };\n//   increment = id => {\n//     let tempCart = [...this.state.cart];\n//     const selectedProduct = tempCart.find(item => {\n//       return item.id === id;\n//     });\n//     const index = tempCart.indexOf(selectedProduct);\n//     const product = tempCart[index];\n//     product.count = product.count + 1;\n//     product.total = product.count * product.price;\n//     this.setState(() => {\n//       return {\n//         cart: [...tempCart]\n//       };\n//     }, this.addTotals);\n//   };\n//   decrement = id => {\n//     let tempCart = [...this.state.cart];\n//     const selectedProduct = tempCart.find(item => {\n//       return item.id === id;\n//     });\n//     const index = tempCart.indexOf(selectedProduct);\n//     const product = tempCart[index];\n//     product.count = product.count - 1;\n//     if (product.count === 0) {\n//       this.removeItem(id);\n//     } else {\n//       product.total = product.count * product.price;\n//       this.setState(() => {\n//         return { cart: [...tempCart] };\n//       }, this.addTotals);\n//     }\n//   };\n//   getTotals = () => {\n//     // const subTotal = this.state.cart\n//     //   .map(item => item.total)\n//     //   .reduce((acc, curr) => {\n//     //     acc = acc + curr;\n//     //     return acc;\n//     //   }, 0);\n//     let subTotal = 0;\n//     this.state.cart.map(item => (subTotal += item.total));\n//     const tempTax = subTotal * 0.1;\n//     const tax = parseFloat(tempTax.toFixed(2));\n//     const total = subTotal + tax;\n//     return {\n//       subTotal,\n//       tax,\n//       total\n//     };\n//   };\n//   addTotals = () => {\n//     const totals = this.getTotals();\n//     this.setState(\n//       () => {\n//         return {\n//           cartSubTotal: totals.subTotal,\n//           cartTax: totals.tax,\n//           cartTotal: totals.total\n//         };\n//       },\n//       () => {\n//         // console.log(this.state);\n//       }\n//     );\n//   };\n//   removeItem = id => {\n//     let tempProducts = [...this.state.products];\n//     let tempCart = [...this.state.cart];\n//     const index = tempProducts.indexOf(this.getItem(id));\n//     let removedProduct = tempProducts[index];\n//     removedProduct.inCart = false;\n//     removedProduct.count = 0;\n//     removedProduct.total = 0;\n//     tempCart = tempCart.filter(item => {\n//       return item.id !== id;\n//     });\n//     this.setState(() => {\n//       return {\n//         cart: [...tempCart],\n//         products: [...tempProducts]\n//       };\n//     }, this.addTotals);\n//   };\n//   clearCart = () => {\n//     this.setState(\n//       () => {\n//         return { cart: [] };\n//       },\n//       () => {\n//         this.setProducts();\n//         this.addTotals();\n//       }\n//     );\n//   };\n//   render() {\n//     return (\n//       <ProductContext.Provider\n//         value={{\n//           ...this.state,\n//           handleDetail: this.handleDetail,\n//           addToCart: this.addToCart,\n//           openModal: this.openModal,\n//           closeModal: this.closeModal,\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           removeItem: this.removeItem,\n//           clearCart: this.clearCart\n//         }}\n//       >\n//         {this.props.children}\n//       </ProductContext.Provider>\n//     );\n//   }\n// }\n// const ProductConsumer = ProductContext.Consumer;\n// export { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["F:/react/mobile/src/Context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","setProducts","forEach","item","singleItem","setState","checkCartItems","getItem","id","product","find","handleDetail","addToCart","tempProducts","index","indexOf","inCart","count","price","total","addTotals","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,QAA3C;AAEA,MAAMC,cAAc,GAAGJ,KAAK,CAACK,aAAN,EAAvB;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCM,KADoC,GAC7B;AACHC,MAAAA,QAAQ,EAAC,EADN;AAEHL,MAAAA,aAAa,EAACA,aAFX;AAGHM,MAAAA,IAAI,EAAC;AAHF,KAD6B;;AAAA,SAWtCC,WAXsC,GAWxB,MAAM;AAClB,UAAIF,QAAQ,GAAG,EAAf;AACAN,MAAAA,aAAa,CAACS,OAAd,CAAsBC,IAAI,IAAI;AAC5B,cAAMC,UAAU,GAAG,EAAE,GAAGD;AAAL,SAAnB;AACAJ,QAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcK,UAAd,CAAX;AACD,OAHD;AAIA,WAAKC,QAAL,CAAc,MAAM;AAClB,eAAO;AAAEN,UAAAA;AAAF,SAAP;AACD,OAFD,EAEG,KAAKO,cAFR;AAGD,KApBqC;;AAAA,SAsBtCC,OAtBsC,GAsB5BC,EAAE,IAAI;AACd,YAAMC,OAAO,GAAG,KAAKX,KAAL,CAAWC,QAAX,CAAoBW,IAApB,CAAyBP,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYA,EAA7C,CAAhB;AACA,aAAOC,OAAP;AACD,KAzBqC;;AAAA,SA0BtCE,YA1BsC,GA0BvBH,EAAE,IAAI;AACnB,YAAMC,OAAO,GAAG,KAAKF,OAAL,CAAaC,EAAb,CAAhB;AACA,WAAKH,QAAL,CAAc,MAAM;AAClB,eAAO;AAAEX,UAAAA,aAAa,EAAEe;AAAjB,SAAP;AACD,OAFD;AAGD,KA/BqC;;AAAA,SAgCtCG,SAhCsC,GAgC1BJ,EAAE,IAAI;AAChB,UAAIK,YAAY,GAAG,CAAC,GAAG,KAAKf,KAAL,CAAWC,QAAf,CAAnB;AACA,YAAMe,KAAK,GAAGD,YAAY,CAACE,OAAb,CAAqB,KAAKR,OAAL,CAAaC,EAAb,CAArB,CAAd;AACA,YAAMC,OAAO,GAAGI,YAAY,CAACC,KAAD,CAA5B;AACAL,MAAAA,OAAO,CAACO,MAAR,GAAiB,IAAjB;AACAP,MAAAA,OAAO,CAACQ,KAAR,GAAgB,CAAhB;AACA,YAAMC,KAAK,GAAGT,OAAO,CAACS,KAAtB;AACAT,MAAAA,OAAO,CAACU,KAAR,GAAgBD,KAAhB;AAEA,WAAKb,QAAL,CAAc,MAAM;AAClB,eAAO;AACLN,UAAAA,QAAQ,EAAE,CAAC,GAAGc,YAAJ,CADL;AAELb,UAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqBS,OAArB,CAFD;AAGLf,UAAAA,aAAa,EAAE,EAAE,GAAGe;AAAL;AAHV,SAAP;AAKD,OAND,EAMG,KAAKW,SANR;AAOD,KAhDqC;AAAA;;AAOtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKpB,WAAL;AACD;;AAyCCqB,EAAAA,MAAM,GAAG;AACL,wBACI,uDACA,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAE,EAC5B,GAAG,KAAKxB,KADoB;AAE5Ba,QAAAA,YAAY,EAAE,KAAKb,KAAL,CAAWa,YAFG;AAG5BC,QAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc;AAHM,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,KAAKW,KAAL,CAAWC,QALhB,CADA,CADJ;AAYH;;AA/DmC;;AAkExC,MAAMC,eAAe,GAAG9B,cAAc,CAAC+B,QAAvC;AAEA,SAAQ7B,eAAR,EAA0B4B,esourcesContent":["import React, { Component } from 'react';\r\nimport {storeProducts, detailProduct} from './data';\r\n\r\nconst ProductContext = React.createContext();\r\n\r\nclass ProductProvider extends Component {\r\n    state ={\r\n        products:[],\r\n        detailProduct:detailProduct,\r\n        cart:[]\r\n    };\r\n    \r\n  componentDidMount() {\r\n    this.setProducts();\r\n  }\r\n\r\n  setProducts = () => {\r\n    let products = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      products = [...products, singleItem];\r\n    });\r\n    this.setState(() => {\r\n      return { products };\r\n    }, this.checkCartItems);\r\n  };\r\n\r\n  getItem = id => {\r\n    const product = this.state.products.find(item => item.id === id);\r\n    return product;\r\n  };\r\n  handleDetail = id => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { detailProduct: product };\r\n    });\r\n  };\r\n  addToCart = id => {\r\n    let tempProducts = [...this.state.products];\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    const product = tempProducts[index];\r\n    product.inCart = true;\r\n    product.count = 1;\r\n    const price = product.price;\r\n    product.total = price;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        products: [...tempProducts],\r\n        cart: [...this.state.cart, product],\r\n        detailProduct: { ...product }\r\n      };\r\n    }, this.addTotals);\r\n  };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <ProductContext.Provider value={{\r\n                ...this.state,\r\n                handleDetail: this.state.handleDetail,\r\n                addToCart: this.state.addToCart\r\n            }}>\r\n                {this.props.children}\r\n                \r\n            </ProductContext.Provider>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport {ProductProvider , ProductConsumer };\r\n\r\n// import React, { Component } from \"react\";\r\n// import { storeProducts, detailProduct } from \"./data\";\r\n// const ProductContext = React.createContext();\r\n\r\n// class ProductProvider extends Component {\r\n//   state = {\r\n//     products: [],\r\n//     detailProduct: detailProduct,\r\n//     cart: [],\r\n//     modalOpen: false,\r\n//     modalProduct: detailProduct,\r\n//     cartSubTotal: 0,\r\n//     cartTax: 0,\r\n//     cartTotal: 0\r\n//   };\r\n//   componentDidMount() {\r\n//     this.setProducts();\r\n//   }\r\n\r\n//   setProducts = () => {\r\n//     let products = [];\r\n//     storeProducts.forEach(item => {\r\n//       const singleItem = { ...item };\r\n//       products = [...products, singleItem];\r\n//     });\r\n//     this.setState(() => {\r\n//       return { products };\r\n//     }, this.checkCartItems);\r\n//   };\r\n\r\n//   getItem = id => {\r\n//     const product = this.state.products.find(item => item.id === id);\r\n//     return product;\r\n//   };\r\n//   handleDetail = id => {\r\n//     const product = this.getItem(id);\r\n//     this.setState(() => {\r\n//       return { detailProduct: product };\r\n//     });\r\n//   };\r\n//   addToCart = id => {\r\n//     let tempProducts = [...this.state.products];\r\n//     const index = tempProducts.indexOf(this.getItem(id));\r\n//     const product = tempProducts[index];\r\n//     product.inCart = true;\r\n//     product.count = 1;\r\n//     const price = product.price;\r\n//     product.total = price;\r\n\r\n//     this.setState(() => {\r\n//       return {\r\n//         products: [...tempProducts],\r\n//         cart: [...this.state.cart, product],\r\n//         detailProduct: { ...product }\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   openModal = id => {\r\n//     const product = this.getItem(id);\r\n//     this.setState(() => {\r\n//       return { modalProduct: product, modalOpen: true };\r\n//     });\r\n//   };\r\n//   closeModal = () => {\r\n//     this.setState(() => {\r\n//       return { modalOpen: false };\r\n//     });\r\n//   };\r\n//   increment = id => {\r\n//     let tempCart = [...this.state.cart];\r\n//     const selectedProduct = tempCart.find(item => {\r\n//       return item.id === id;\r\n//     });\r\n//     const index = tempCart.indexOf(selectedProduct);\r\n//     const product = tempCart[index];\r\n//     product.count = product.count + 1;\r\n//     product.total = product.count * product.price;\r\n//     this.setState(() => {\r\n//       return {\r\n//         cart: [...tempCart]\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   decrement = id => {\r\n//     let tempCart = [...this.state.cart];\r\n//     const selectedProduct = tempCart.find(item => {\r\n//       return item.id === id;\r\n//     });\r\n//     const index = tempCart.indexOf(selectedProduct);\r\n//     const product = tempCart[index];\r\n//     product.count = product.count - 1;\r\n//     if (product.count === 0) {\r\n//       this.removeItem(id);\r\n//     } else {\r\n//       product.total = product.count * product.price;\r\n//       this.setState(() => {\r\n//         return { cart: [...tempCart] };\r\n//       }, this.addTotals);\r\n//     }\r\n//   };\r\n//   getTotals = () => {\r\n//     // const subTotal = this.state.cart\r\n//     //   .map(item => item.total)\r\n//     //   .reduce((acc, curr) => {\r\n//     //     acc = acc + curr;\r\n//     //     return acc;\r\n//     //   }, 0);\r\n//     let subTotal = 0;\r\n//     this.state.cart.map(item => (subTotal += item.total));\r\n//     const tempTax = subTotal * 0.1;\r\n//     const tax = parseFloat(tempTax.toFixed(2));\r\n//     const total = subTotal + tax;\r\n//     return {\r\n//       subTotal,\r\n//       tax,\r\n//       total\r\n//     };\r\n//   };\r\n//   addTotals = () => {\r\n//     const totals = this.getTotals();\r\n//     this.setState(\r\n//       () => {\r\n//         return {\r\n//           cartSubTotal: totals.subTotal,\r\n//           cartTax: totals.tax,\r\n//           cartTotal: totals.total\r\n//         };\r\n//       },\r\n//       () => {\r\n//         // console.log(this.state);\r\n//       }\r\n//     );\r\n//   };\r\n//   removeItem = id => {\r\n//     let tempProducts = [...this.state.products];\r\n//     let tempCart = [...this.state.cart];\r\n\r\n//     const index = tempProducts.indexOf(this.getItem(id));\r\n//     let removedProduct = tempProducts[index];\r\n//     removedProduct.inCart = false;\r\n//     removedProduct.count = 0;\r\n//     removedProduct.total = 0;\r\n\r\n//     tempCart = tempCart.filter(item => {\r\n//       return item.id !== id;\r\n//     });\r\n\r\n//     this.setState(() => {\r\n//       return {\r\n//         cart: [...tempCart],\r\n//         products: [...tempProducts]\r\n//       };\r\n//     }, this.addTotals);\r\n//   };\r\n//   clearCart = () => {\r\n//     this.setState(\r\n//       () => {\r\n//         return { cart: [] };\r\n//       },\r\n//       () => {\r\n//         this.setProducts();\r\n//         this.addTotals();\r\n//       }\r\n//     );\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <ProductContext.Provider\r\n//         value={{\r\n//           ...this.state,\r\n//           handleDetail: this.handleDetail,\r\n//           addToCart: this.addToCart,\r\n//           openModal: this.openModal,\r\n//           closeModal: this.closeModal,\r\n//           increment: this.increment,\r\n//           decrement: this.decrement,\r\n//           removeItem: this.removeItem,\r\n//           clearCart: this.clearCart\r\n//         }}\r\n//       >\r\n//         {this.props.children}\r\n//       </ProductContext.Provider>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const ProductConsumer = ProductContext.Consumer;\r\n\r\n// export { ProductProvider, ProductConsumer };"]},"metadata":{},"sourceType":"module"}